// filepath: c:\Dev2\AI-VideoGen\ai-vid-gen\src\components\create-video\VideoPreviewSection.tsx
import React, { useMemo, useState, useEffect } from 'react';
import { VideoData, Scene } from '@/types/video';
import { VideoResponse } from './VideoResponse';
import DebugImageGeneration from './DebugImageGeneration';
import VideoPlayer from './VideoPlayer';
import { useVideo } from '@/context/video';
import Image from 'next/image';
import { Play, Clock, Film, Volume2, Subtitles, Loader2, AlertTriangle, Info } from 'lucide-react';

// Helper function to calculate scene duration based on captions
const calculateSceneDuration = (scene: Scene): number => {
  if (!scene.captions || scene.captions.length === 0) {
    return 5; // Default duration if no captions
  }

  const lastCaption = scene.captions[scene.captions.length - 1];
  const durationInSeconds = Math.ceil(lastCaption.end / 1000); // Convert ms to seconds
  return Math.max(durationInSeconds, 5); // Ensure minimum 5 seconds duration
};

// Helper function to format seconds to MM:SS format
const formatDuration = (seconds: number): string => {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
};

interface VideoPreviewSectionProps {
  videoData: VideoData | null;
  error: string | null;
}

export const VideoPreviewSection: React.FC<VideoPreviewSectionProps> = ({
  videoData,
  error,
}) => {
  const { scenes, status } = useVideo();
  const [showVideoPlayer, setShowVideoPlayer] = useState(false);
  const [showPreviewSection, setShowPreviewSection] = useState(true); // State to track preview section visibility
  const [isTransitioning, setIsTransitioning] = useState(false); // New state for transition animations
  
  // New state for loading animations
  const [loadingProgress, setLoadingProgress] = useState(0);
  
  // Simulate loading progress when generating
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (status === 'creating') {
      setLoadingProgress(0);
      interval = setInterval(() => {
        setLoadingProgress(prev => {
          const newProgress = prev + Math.random() * 2;
          return newProgress > 95 ? 95 : newProgress; // Cap at 95% until actually complete
        });
      }, 300);
    } else if (status === 'completed') {
      setLoadingProgress(100);
    }
    
    return () => {
      clearInterval(interval);
    };
  }, [status]);

  const hasMediaScenes = useMemo(() => {
    const hasScenes = scenes.some((scene) => {
      const hasImage = scene.imageUrl && scene.imageUrl.trim() !== '';
      if (hasImage) {
        console.log('Found scene with image:', scene.imageUrl);
      }
      return hasImage;
    });

    console.log('Has media scenes:', hasScenes);
    return hasScenes;
  }, [scenes]); // Get the first scene with an image
  
  const firstMediaScene = useMemo(() => {
    const scene = scenes.find(
      (scene) => scene.imageUrl && scene.imageUrl.trim() !== ''
    );
    if (scene) {
      console.log('Found first scene with image:', scene.imageUrl);
    } else {
      console.log('No scenes with images found');
    }
    return scene;
  }, [scenes]);

  // Calculate durations for all scenes with captions
  const scenesWithDuration = useMemo(() => {
    return scenes.map((scene) => ({
      ...scene,
      duration: calculateSceneDuration(scene),
    }));
  }, [scenes]);

  // Calculate total video duration
  const totalDuration = useMemo(() => {
    return scenesWithDuration.reduce(
      (total, scene) => total + scene.duration,
      0
    );
  }, [scenesWithDuration]);
  
  // Add default caption settings if scene has captions
  const sceneWithSettings = useMemo(() => {
    if (!firstMediaScene) return null;

    return firstMediaScene.captions && firstMediaScene.captions.length > 0
      ? {
          ...firstMediaScene,
          captionSettings: {
            enabled: true,
            style: {
              backgroundColor: 'rgba(0, 0, 0, 0.7)',
              textColor: 'white',
              fontSize: 'text-lg',
            },
          },
        }
      : firstMediaScene;
  }, [firstMediaScene]);
  
  return (
    <div className='w-full space-y-8'>
      {showPreviewSection && (
        <div className='relative overflow-hidden bg-gradient-to-br from-card/60 via-card/40 to-background/20 backdrop-blur-xl border border-border/50 rounded-2xl shadow-2xl'>
          {/* Enhanced background patterns */}
          <div className='absolute inset-0 bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-primary/10 via-transparent to-accent/5 opacity-40' />
          <div className='absolute top-0 right-0 w-64 h-64 bg-gradient-to-bl from-primary/5 to-transparent rounded-full blur-3xl' />

          <div className='relative p-8'>
            {/* Enhanced header section */}
            <div className='flex items-center justify-between mb-8'>
              <div className='flex items-center gap-4'>
                <div className='p-3 bg-primary/20 rounded-xl'>
                  <Film className='w-6 h-6 text-primary' />
                </div>
                <div>
                  <h2 className='text-3xl font-bold text-foreground'>
                    Video Preview
                  </h2>
                  <p className='text-muted-foreground'>
                    Watch your AI-generated video come to life
                  </p>
                </div>
              </div>
              {hasMediaScenes && (
                <div className='flex items-center gap-3 px-4 py-2 bg-primary/10 rounded-full border border-primary/20'>
                  <Clock className='w-5 h-5 text-primary' />
                  <span className='text-primary font-semibold'>
                    {formatDuration(totalDuration)}
                  </span>
                </div>
              )}
            </div>

            {videoData?.title && (
              <div className='mb-4 p-3 bg-primary/10 rounded-lg border border-primary/20'>
                <h3 className='text-lg font-medium text-primary'>
                  {videoData.title}
                </h3>
              </div>
            )}
            
            {!hasMediaScenes ? (
              <div className='aspect-video bg-gradient-to-br from-muted/50 to-muted/30 rounded-xl border-2 border-dashed border-border flex flex-col items-center justify-center text-center p-8 animate-in fade-in-50 duration-500'>
                {status === 'creating' ? (
                  <div className='flex flex-col items-center'>
                    <div className='relative w-20 h-20 mb-4'>
                      <div className='absolute inset-0 rounded-full bg-primary/20 animate-ping'></div>
                      <div className='relative w-20 h-20 flex items-center justify-center bg-primary/10 rounded-full'>
                        <Loader2 className='w-10 h-10 text-primary animate-spin' />
                      </div>
                    </div>
                    <h3 className='text-lg font-medium mb-2'>Creating Your Video</h3>
                    <p className='text-muted-foreground max-w-md mb-6'>
                      Please wait while we generate your video with AI. This may take a few moments.
                    </p>
                    <div className='w-64 h-2 bg-muted rounded-full overflow-hidden'>
                      <div 
                        className='h-full bg-gradient-to-r from-primary via-primary to-accent rounded-full transition-all duration-300'
                        style={{ width: `${loadingProgress}%` }}
                      ></div>
                    </div>
                    <p className='text-xs text-muted-foreground mt-2'>
                      {loadingProgress < 30 
                        ? 'Processing story...' 
                        : loadingProgress < 60 
                        ? 'Generating scenes...' 
                        : loadingProgress < 90 
                        ? 'Creating audio...' 
                        : 'Finalizing your video...'}
                    </p>
                  </div>
                ) : (
                  <>
                    <div className='w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4 animate-pulse'>
                      <Film className='w-8 h-8 text-muted-foreground' />
                    </div>
                    <h3 className='text-lg font-medium mb-2'>Ready to Create</h3>
                    <p className='text-muted-foreground max-w-md'>
                      Your generated video will appear here after processing. Select
                      your story and style to get started.
                    </p>
                  </>
                )}

                {/* Enhanced decorative elements */}
                <div className='absolute top-1/4 left-1/4 w-32 h-32 bg-gradient-to-br from-primary/5 to-transparent rounded-full blur-2xl'></div>
                <div className='absolute bottom-1/4 right-1/4 w-32 h-32 bg-gradient-to-tr from-accent/5 to-transparent rounded-full blur-2xl'></div>
              </div>
            ) : (
              /* Display first scene image if available */
              firstMediaScene &&
              firstMediaScene.imageUrl && (
                <div className='space-y-4'>
                  <div
                    className='relative aspect-video w-full overflow-hidden rounded-xl border border-border cursor-pointer group transition-all duration-300 hover:shadow-xl'
                    onClick={() => {
                      if (sceneWithSettings?.audio) {
                        setShowVideoPlayer(true);
                        setShowPreviewSection(false);
                      }
                    }}
                  >
                    <Image
                      src={firstMediaScene.imageUrl}
                      alt={firstMediaScene.description || 'First scene image'}
                      fill
                      style={{ objectFit: 'cover' }}
                      className='rounded-xl transition-transform duration-300 group-hover:scale-105'
                      unoptimized={true}
                      priority={true}
                      onError={(e) => {
                        console.error(
                          'Image failed to load:',
                          firstMediaScene.imageUrl
                        );
                        const target = e.target as HTMLImageElement;
                        target.src = '/images/fantasy.jpg';
                        target.style.objectFit = 'cover';
                      }}
                    />

                    {/* Gradient overlay */}
                    <div className='absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300' />

                    {/* Play button overlay */}
                    {sceneWithSettings?.audio && (
                      <div className='absolute inset-0 flex items-center justify-center'>
                        <div className='bg-black/70 backdrop-blur-sm rounded-full p-6 group-hover:bg-black/80 transition-all duration-300 group-hover:scale-110 shadow-lg'>
                          <Play 
                            className='w-8 h-8 text-white ml-1' 
                            fill='white'
                          />
                        </div>
                      </div>
                    )}

                    {/* Status indicator */}
                    <div className='absolute top-4 left-4'>
                      <div className='bg-black/70 backdrop-blur-sm rounded-full px-3 py-1 text-xs text-white font-medium flex items-center gap-2'>
                        {sceneWithSettings?.audio ? (
                          <>
                            <span className='w-2 h-2 bg-green-500 rounded-full animate-pulse'></span>
                            Ready to Play
                          </>
                        ) : (
                          <>
                            <span className='w-2 h-2 bg-amber-500 rounded-full animate-pulse'></span>
                            Processing...
                          </>
                        )}
                      </div>
                    </div>
                    
                    {/* Media info badges */}
                    <div className='absolute bottom-4 left-4 flex gap-2'>
                      {sceneWithSettings?.audio && (
                        <div className='bg-black/70 backdrop-blur-sm rounded-full px-3 py-1 text-xs text-white font-medium flex items-center gap-1'>
                          <Volume2 className='w-3 h-3' />
                          Audio
                        </div>
                      )}
                      {sceneWithSettings?.captions && sceneWithSettings.captions.length > 0 && (
                        <div className='bg-black/70 backdrop-blur-sm rounded-full px-3 py-1 text-xs text-white font-medium flex items-center gap-1'>
                          <Subtitles className='w-3 h-3' />
                          Captions
                        </div>
                      )}
                    </div>
                  </div>

                  <div className='bg-muted/50 backdrop-blur-sm rounded-lg p-4 border border-border/30'>
                    <p className='text-sm font-medium text-foreground leading-relaxed'>
                      {firstMediaScene.description ||
                        firstMediaScene.textContent ||
                        'No description available'}
                    </p>
                  </div>
                </div>
              )
            )}
          </div>
        </div>
      )}
      
      {/* Video Player Component */}
      {firstMediaScene && showVideoPlayer && (
        <div className='bg-card/50 backdrop-blur-sm border border-border/50 rounded-xl p-6 shadow-lg animate-in slide-in-from-top-2 duration-300'>
          <div className='flex justify-between items-center mb-4'>
            <h3 className='text-xl font-semibold text-foreground flex items-center gap-2'>
              <Film className='w-5 h-5 text-primary' />
              Video Player
            </h3>
            <button
              onClick={() => {
                setShowVideoPlayer(false);
                setShowPreviewSection(true);
              }}
              className='p-2 rounded-lg border border-border/50 hover:bg-muted/50 transition-colors duration-200'
              aria-label="Close video player"
            >
              <svg
                xmlns='http://www.w3.org/2000/svg'
                width='20'
                height='20'
                viewBox='0 0 24 24'
                fill='none'
                stroke='currentColor'
                strokeWidth='2'
                strokeLinecap='round'
                strokeLinejoin='round'
                className='text-muted-foreground'
              >
                <line x1='18' y1='6' x2='6' y2='18'></line>
                <line x1='6' y1='6' x2='18' y2='18'></line>
              </svg>
            </button>
          </div>

          {sceneWithSettings && sceneWithSettings.audio ? (
            <div className='ring-1 ring-border/40 rounded-xl overflow-hidden shadow-lg'>
              <VideoPlayer scene={sceneWithSettings} />
            </div>
          ) : (
            <div className='bg-amber-50 border border-amber-200 rounded-lg p-4 text-amber-800'>
              <div className='flex items-center gap-2 mb-2'>
                <svg
                  className='w-5 h-5'
                  fill='none'
                  stroke='currentColor'
                  viewBox='0 0 24 24'
                >
                  <path
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    strokeWidth={2}
                    d='M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z'
                  />
                </svg>
                <span className='font-medium'>Audio Processing</span>
              </div>
              <p className='text-sm'>
                Audio is being generated. The video player will appear once
                audio is available.
              </p>
            </div>
          )}
        </div>
      )}
      
      {/* Debug Images Section */}
      <DebugImageGeneration />
      
      {/* Scene durations section - enhanced design */}
      {hasMediaScenes && scenesWithDuration.length > 0 && (
        <div className='bg-card/50 backdrop-blur-sm border border-border/50 rounded-xl shadow-lg overflow-hidden transform transition-all hover:shadow-xl'>
          <details className='group'>
            <summary className='p-6 cursor-pointer hover:bg-muted/20 transition-colors duration-200'>
              <div className='flex items-center justify-between'>
                <div className='flex items-center gap-3'>
                  <h3 className='text-lg font-semibold text-foreground flex items-center gap-2'>
                    <Clock className='w-5 h-5 text-muted-foreground' />
                    Scene Timeline
                  </h3>
                  {scenesWithDuration.some(
                    (scene) => scene.duration < 2 || scene.duration > 30
                  ) && (
                    <span
                      className='flex items-center gap-1 text-amber-600 text-sm'
                      title='Some scenes have unusual durations'
                    >
                      <svg
                        className='w-4 h-4'
                        fill='none'
                        stroke='currentColor'
                        viewBox='0 0 24 24'
                      >
                        <path
                          strokeLinecap='round'
                          strokeLinejoin='round'
                          strokeWidth={2}
                          d='M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z'
                        />
                      </svg>
                      Timing Issues
                    </span>
                  )}
                </div>
                <svg
                  className='w-5 h-5 text-muted-foreground transition-transform group-open:rotate-180'
                  fill='none'
                  stroke='currentColor'
                  viewBox='0 0 24 24'
                >
                  <path
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    strokeWidth={2}
                    d='M19 9l-7 7-7-7'
                  />
                </svg>
              </div>
            </summary>
            <div className='px-6 pb-6 space-y-3 border-t border-border/30'>
              {scenesWithDuration.map((scene, index) => {
                const isUnusualDuration =
                  scene.duration < 2 || scene.duration > 30;

                return (
                  <div
                    key={index}
                    className={`p-4 rounded-lg border transition-all duration-200 ${
                      isUnusualDuration
                        ? 'bg-amber-50/70 border-amber-200/70 hover:bg-amber-50 hover:border-amber-200'
                        : 'bg-muted/30 border-border/50 hover:bg-muted/50 hover:border-border/70'
                    }`}
                  >
                    <div className='flex justify-between items-start mb-2'>
                      <div className='flex items-center gap-2'>
                        <span className='font-medium text-foreground'>
                          Scene {index + 1}
                        </span>
                        {isUnusualDuration && (
                          <span
                            className='flex items-center gap-1 text-amber-600 text-xs'
                            title={
                              scene.duration < 2
                                ? 'Duration might be too short'
                                : 'Duration might be too long'
                            }
                          >
                            <svg
                              className='w-3 h-3'
                              fill='none'
                              stroke='currentColor'
                              viewBox='0 0 24 24'
                            >
                              <path
                                strokeLinecap='round'
                                strokeLinejoin='round'
                                strokeWidth={2}
                                d='M12 9v2m0 4h.01'
                              />
                            </svg>
                            {scene.duration < 2 ? 'Too Short' : 'Too Long'}
                          </span>
                        )}
                      </div>
                      <div className='flex items-center gap-2'>
                        <Clock
                          className='w-4 h-4 text-muted-foreground'
                        />
                        <span className='bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium'>
                          {formatDuration(scene.duration)}
                        </span>
                      </div>
                    </div>
                    <p className='text-sm text-muted-foreground leading-relaxed line-clamp-2 mb-2'>
                      {scene.description ||
                        scene.textContent ||
                        'No description available'}
                    </p>
                    {scene.captions && (
                      <div className='flex items-center gap-1 text-xs text-muted-foreground'>
                        <Subtitles
                          className='w-3 h-3'
                        />
                        {scene.captions.length} caption
                        {scene.captions.length !== 1 ? 's' : ''}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </details>
        </div>
      )}
      
      {/* Error Display */}
      {error && (
        <div className='bg-destructive/10 border border-destructive/20 rounded-xl p-6 shadow-lg backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-500 relative overflow-hidden'>
          {/* Animated background patterns */}
          <div className='absolute inset-0 bg-gradient-to-r from-destructive/5 to-transparent opacity-50'></div>
          <div className='absolute -top-10 -right-10 w-40 h-40 bg-destructive/10 rounded-full blur-3xl animate-pulse'></div>
          
          <div className='relative z-10'>
            <div className='flex items-center gap-3 mb-4'>
              <div className='p-3 bg-destructive/20 rounded-xl ring-4 ring-destructive/10 relative'>
                <AlertTriangle className='w-5 h-5 text-destructive animate-pulse' />
                <span className='absolute top-0 right-0 w-2 h-2 bg-destructive rounded-full animate-ping'></span>
              </div>
              <div>
                <h4 className='text-lg font-bold text-destructive'>Error Processing Your Video</h4>
                <p className='text-destructive/80 text-sm'>We encountered an issue while creating your video</p>
              </div>
            </div>
            
            <div className='bg-destructive/5 p-4 rounded-lg border border-destructive/20 hover:border-destructive/30 transition-colors duration-300 hover:bg-destructive/10'>
              <p className='text-destructive text-sm font-medium leading-relaxed'>{error}</p>
            </div>
            
            <div className='mt-4 flex items-center gap-2'>
              <Info className='w-4 h-4 text-destructive/70' />
              <p className='text-xs text-destructive/70'>
                Try adjusting your prompt or selecting a different style
              </p>
            </div>
          </div>
        </div>
      )}
      
      {/* Video Response Component - Enhanced collapsible design */}
      {videoData && (
        <div className='bg-card/50 backdrop-blur-sm border border-border/50 rounded-xl shadow-lg overflow-hidden'>
          <details className='group'>
            <summary className='p-6 cursor-pointer hover:bg-muted/20 transition-colors duration-200'>
              <div className='flex items-center justify-between'>
                <div className='flex items-center gap-3'>
                  <svg
                    className='w-5 h-5 text-muted-foreground'
                    fill='none'
                    stroke='currentColor'
                    viewBox='0 0 24 24'
                  >
                    <path
                      strokeLinecap='round'
                      strokeLinejoin='round'
                      strokeWidth={2}
                      d='M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'
                    />
                  </svg>
                  <h3 className='text-lg font-semibold text-foreground'>
                    AI Response Details
                  </h3>
                </div>
                <svg
                  className='w-5 h-5 text-muted-foreground transition-transform group-open:rotate-180'
                  fill='none'
                  stroke='currentColor'
                  viewBox='0 0 24 24'
                >
                  <path
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    strokeWidth={2}
                    d='M19 9l-7 7-7-7'
                  />
                </svg>
              </div>
            </summary>
            <div className='px-6 pb-6 border-t border-border/50'>
              <VideoResponse videoData={videoData} error={null} />
            </div>
          </details>
        </div>
      )}
    </div>
  );
};
