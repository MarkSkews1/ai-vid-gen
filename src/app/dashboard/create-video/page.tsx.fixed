'use client';
import React, { useState, useEffect } from 'react';
import { useVideo } from '@/context/video';
import { Button } from '@/components/ui/button';

export default function CreateVideoPage() {
  const { script, setImages, setCaptions, setLoading } = useVideo();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [retryAfter, setRetryAfter] = useState<number | null>(null);
  const [countdown, setCountdown] = useState<number | null>(null);

  // Countdown timer for rate limit
  useEffect(() => {
    if (retryAfter && countdown !== null && countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (countdown === 0) {
      setRetryAfter(null);
      setCountdown(null);
      setError(null);
    }
  }, [retryAfter, countdown]);

  const handleCreateVideo = async () => {
    setIsLoading(true);
    setLoading(true);
    setError(null);
    setRetryAfter(null);
    setCountdown(null);

    try {
      // Call the API route directly from the client component
      const response = await fetch('/api/generate-video', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: script,
          modelVersion: 'gemini-2.5-pro-preview-05-06',
        }),
      });

      const data = await response.json();
      
      if (!response.ok) {
        // Check if this is a rate limit error
        if (response.status === 429 && data.isRateLimit) {
          const waitSeconds = data.retryAfter || 60;
          setRetryAfter(waitSeconds);
          setCountdown(waitSeconds);
          throw new Error(`Rate limit reached. Please try again later.`);
        }
        throw new Error(data.error || 'Failed to generate video script');
      }

      console.log('Generated scenes:', data.scenes);

      // Update application state with the generated scenes
      if (data.scenes && Array.isArray(data.scenes) && data.scenes.length > 0) {
        // Extract image prompts from scenes
        const sceneImages = data.scenes.map((scene) => scene.imagePrompt || '');

        // Update the context with the new data
        setImages(sceneImages);
        setCaptions(data.scenes);
      } else {
        throw new Error('No valid scenes returned from the API');
      }
    } catch (error: unknown) {
      console.error('Error generating video:', error);
      setError(
        error instanceof Error ? error.message : 'An unknown error occurred'
      );
    } finally {
      setIsLoading(false);
      setLoading(false);
    }
  };

  return (
    <div className='p-10'>
      <h1 className='text-2xl font-bold mb-5'>Create Video Page</h1>
      <div className='my-5'>
        <Button 
          onClick={handleCreateVideo} 
          disabled={isLoading || (retryAfter !== null)}
          className="bg-blue-600 hover:bg-blue-700 text-white"
        >
          {isLoading 
            ? 'Generating Video Script...' 
            : countdown 
              ? `Rate Limited (${countdown}s)` 
              : 'Generate Video'}
        </Button>

        {error && (
          <div className='mt-4 p-4 bg-red-100 text-red-800 rounded-md'>
            <p className="font-medium">{error}</p>
            {retryAfter && countdown && (
              <p className='mt-2'>
                The API rate limit has been reached. Please wait {countdown} seconds before trying again.
              </p>
            )}
          </div>
        )}

        {!error && isLoading && (
          <div className='mt-4 p-4 bg-blue-50 text-blue-700 rounded-md'>
            <p>Generating video script... This may take a few seconds.</p>
            <p className="mt-2 text-sm">The AI model is creating scenes for your video.</p>
          </div>
        )}
      </div>
    </div>
  );
}
